---
const width = 'w-6'
const genericHamburgerLine = `h-[2px] ${width} bg-black border-0 transition ease transform duration-300 z-10`
---

<button
  id={Astro.props.id}
  aria-expanded="false"
  class:list={[
    'hamburgerButton group !p-0 relative flex h-[20px] w-[24px] flex-col items-end justify-between lg:hidden',
    width,
    'bg-transparent border-0'
  ]}
  aria-label="Abrir menú de navegación"
>
  <span class:list={['group-[.open]:translate-y-2 group-[.open]:rotate-45 ', genericHamburgerLine]}>
  </span>
  <span class:list={['group-[.open]:opacity-0 w-4/6', genericHamburgerLine]}></span>
  <span
    class:list={[
      'group-[.open]:-translate-y-[0.6rem] group-[.open]:-rotate-45 ',
      genericHamburgerLine,
    ]}
  >
  </span>
</button>
<script>
  const DISPLAY = {
    hamburgerMenuClass: '.hamburgerButton',
    open: 'open',
    hamburgerButtonClicked: 'hamburgerButtonClicked',
  } as const

  window.onload = () => {
    const hamburgerButton = document.querySelector(DISPLAY.hamburgerMenuClass)
    document.querySelectorAll(DISPLAY.hamburgerMenuClass).forEach((button) => {
      button.addEventListener('click', () => {
        const hamburgerButton = document.querySelector(DISPLAY.hamburgerMenuClass)!
        hamburgerButton.classList.toggle(DISPLAY.open)
        const isMenuOpen = hamburgerButton.classList.contains(DISPLAY.open)
        hamburgerButton.setAttribute('aria-expanded', String(isMenuOpen))
        hamburgerButton.setAttribute(
          'aria-label',
          isMenuOpen ? 'Cerrar menú de navegación' : 'Abrir menú de navegación'
        )
        const hamburgerButtonClick = new CustomEvent(DISPLAY.hamburgerButtonClicked)
        hamburgerButton.dispatchEvent(hamburgerButtonClick)
      })
    })
    if (hamburgerButton?.classList?.contains(DISPLAY.open)) {
      hamburgerButton?.classList?.remove(DISPLAY.open)
    }
  }
</script>