---
import { getLangFromUrl, useTranslations, useTranslatedPath } from "src/i18n/utils";
const lang = getLangFromUrl(Astro.url) as 'es' | 'en';
const translatePath = useTranslatedPath(lang);
const t = useTranslations(lang);

const OPINIONS = [
  {
    title: t('opiniones.title1'),
    content: t('opiniones.content1').split('<br>'),
    author: t('opiniones.author1'),
  },
  {
    title: t('opiniones.title2'),
    content: t('opiniones.content2').split('<br>'),
    author: t('opiniones.author2'),
  },
  {
    title: t('opiniones.title3'),
    content: t('opiniones.content3').split('<br>'),
    author: t('opiniones.author3'),
  },
];
---

<section class="bg-cover bg-center bg-no-repeat relative justify-center py-12 md:py-20" style="background-blend-mode: multiply; background-color: #313b41; background-image: url('/img/fondo-opiniones.webp');">
    <div class="flex flex-col justify-center items-center">
       
        <img src="/img/quote.webp" class="w-16 md:w-20">
       
        <div class="max-w-[90%] md:max-w-[1200px] mx-auto mt-6 md:mt-10">
            <div class="slider-container flex items-center">
              <!-- Arrow izquierda -->
              <div class="slider-controls">
                <button id="prevBtn" class="slider-arrow slider-arrow--left">                      
                  <img src="/img/arrow-white.webp" alt="arrow-left" class="w-6 md:w-9 rotate-90">
                </button>
              </div>  
             
              <!-- Track con las opiniones -->
              <div class="slider-track flex-1 overflow-hidden">
                <div class="slider-wrapper" style="transform: translateX(0%); transition: transform 0.5s ease-in-out;">
                  {OPINIONS.map((opinion, index) => (
                    <div class="slider-slide text-white text-center px-4 md:px-8" data-slide={index}>
                      <h2 class="text-2xl md:text-4xl">{opinion.title}</h2>
                      {opinion.content.map((paragraph) => (
                        <p class="mt-3 md:mt-5 text-sm md:text-base leading-relaxed md:leading-5">{paragraph}</p>
                      ))}
                      <p class="text-base md:text-lg font-bold mt-6 md:mt-8">{opinion.author}</p>
                    </div>
                  ))}
                </div>
              </div>
             
              <!-- Arrow derecha -->
              <div class="slider-controls">
                <button id="nextBtn" class="slider-arrow slider-arrow--right">
                  <img src="/img/arrow-white.webp" alt="arrow-right" class="w-6 md:w-9 -rotate-90">
                </button>
              </div>
            </div>                
          </div>
    </div>
   
    <!-- Columnas laterales solo en desktop -->
    <!-- Columna izquierda -->
    <div class="hidden md:flex absolute top-1/2 left-0 transform -translate-y-1/2 border-r border-white w-[70px] h-full items-center justify-center">
        <p class="text-white transform -rotate-90 whitespace-nowrap uppercase tracking-[2px] font-medium">LOVELY NOTES</p>
    </div>
    <!-- Columna derecha -->
    <div class="hidden md:flex absolute top-1/2 right-0 transform -translate-y-1/2 border-l border-white w-[70px] h-full items-center justify-center">
        <p class="text-white transform rotate-90 whitespace-nowrap uppercase tracking-[2px] font-medium">LOVELY NOTES</p>
    </div>
</section>

<style>
  .slider-track {
    position: relative;
    width: 100%;
  }
  
  .slider-wrapper {
    display: flex;
    width: 300%; /* 100% * número de slides */
  }
  
  .slider-slide {
    width: 33.333%; /* 100% / número de slides */
    flex-shrink: 0;
    display: flex;
    flex-direction: column;
    justify-content: center;
    min-height: 300px;
  }
  
  .slider-arrow {
    background: transparent;
    border: none;
    cursor: pointer;
    padding: 10px;
    transition: opacity 0.3s ease;
  }
  
  .slider-arrow:hover {
    opacity: 0.7;
  }
  
  .slider-arrow:disabled {
    opacity: 0.3;
    cursor: not-allowed;
  }

  @media (max-width: 480px) {
    
    .slider-controls{
      display: none;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const slider = {
      wrapper: document.querySelector('.slider-wrapper') as HTMLElement | null,
      slides: document.querySelectorAll('.slider-slide'),
      prevBtn: document.getElementById('prevBtn') as HTMLButtonElement | null,
      nextBtn: document.getElementById('nextBtn') as HTMLButtonElement | null,
      currentIndex: 0,
      totalSlides: 0,
      
      init() {
        if (!this.wrapper || !this.prevBtn || !this.nextBtn) {
          console.error('Slider elements not found');
          return;
        }
        
        this.totalSlides = this.slides.length;
        this.updateSlider();
        this.bindEvents();
      },
      
      bindEvents() {
        if (!this.wrapper || !this.prevBtn || !this.nextBtn) return;
        
        this.prevBtn.addEventListener('click', () => this.prev());
        this.nextBtn.addEventListener('click', () => this.next());
        
        // Opcional: navegación con teclado
        document.addEventListener('keydown', (e: KeyboardEvent) => {
          if (e.key === 'ArrowLeft') this.prev();
          if (e.key === 'ArrowRight') this.next();
        });
        
        // Opcional: soporte para touch/swipe en móviles
        let startX = 0;
        let currentX = 0;
        let isDragging = false;
        
        this.wrapper.addEventListener('touchstart', (e: TouchEvent) => {
          startX = e.touches[0].clientX;
          isDragging = true;
        });
        
        this.wrapper.addEventListener('touchmove', (e: TouchEvent) => {
          if (!isDragging) return;
          currentX = e.touches[0].clientX;
          e.preventDefault();
        });
        
        this.wrapper.addEventListener('touchend', () => {
          if (!isDragging) return;
          
          const diffX = startX - currentX;
          const threshold = 50; // Mínimo de píxeles para considerar swipe
          
          if (Math.abs(diffX) > threshold) {
            if (diffX > 0) {
              this.next(); // Swipe left -> siguiente
            } else {
              this.prev(); // Swipe right -> anterior
            }
          }
          
          isDragging = false;
        });
      },
      
      prev() {
        if (this.currentIndex > 0) {
          this.currentIndex--;
        } else {
          this.currentIndex = this.totalSlides - 1; // Loop al final
        }
        this.updateSlider();
      },
      
      next() {
        if (this.currentIndex < this.totalSlides - 1) {
          this.currentIndex++;
        } else {
          this.currentIndex = 0; // Loop al principio
        }
        this.updateSlider();
      },
      
      goTo(index: number) {
        if (index >= 0 && index < this.totalSlides) {
          this.currentIndex = index;
          this.updateSlider();
        }
      },
      
      updateSlider() {
        if (!this.wrapper) return;
        
        const translateX = -this.currentIndex * (100 / this.totalSlides);
        this.wrapper.style.transform = `translateX(${translateX}%)`;
        
        // Opcional: deshabilitar botones en los extremos (quitar si prefieres loop infinito)
        // if (this.prevBtn && this.nextBtn) {
        //   this.prevBtn.disabled = this.currentIndex === 0;
        //   this.nextBtn.disabled = this.currentIndex === this.totalSlides - 1;
        // }
      }
    };
    
    // Inicializar el slider
    slider.init();
    
    // Opcional: Auto-play (descomenta si quieres que se mueva automáticamente)
    
    setInterval(() => {
      slider.next();
    }, 5000); // Cambia cada 5 segundos
    
  });
</script>